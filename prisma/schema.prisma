// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  sessions Sessions[]
  account Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId // Auto-generated ID mapped to MongoDB ObjectId
  userId            String  @db.ObjectId // User ID as a MongoDB ObjectId
  type              String  // Type of account (e.g., OAuth, SAML, etc.)
  provider          String  // Provider name (e.g., Google, Facebook)
  providerAccountId String  // Provider account ID
  refresh_token     String? @db.String // Refresh token (optional)
  access_token      String? @db.String // Access token (optional)
  expires_at        Int?    // Expiry timestamp for access token (optional)
  token_type        String? // Token type (optional)
  scope             String? // Scope of the access token (optional)
  id_token          String? @db.String // ID token (optional)
  session_state     String? // Session state (optional)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the User model with cascade delete

  @@unique([provider, providerAccountId]) // Composite unique constraint on provider and providerAccountId
}

model Sessions{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  
  user User @relation(fields: [userId], references: [id],onDelete:Cascade)
}

model VerificaionToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String @unique
  expires DateTime
  @@unique([identifier,token])
}

model Movie{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
}